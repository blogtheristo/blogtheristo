name: AP2 Monitor CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'ap2-monitor/**'
      - '.github/workflows/ap2-monitor.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'ap2-monitor/**'
      - '.github/workflows/ap2-monitor.yml'
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI load while maintaining coverage
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    defaults:
      run:
        working-directory: ap2-monitor

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 coverage

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with coverage
      run: |
        coverage run --source=. test_monitor.py
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ap2-monitor/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run monitor script
      run: python monitor.py

    - name: Upload test reports as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ap2-monitor-reports-${{ matrix.os }}-py${{ matrix.python-version }}
        path: ap2-monitor/Results/
        retention-days: 30

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ap2-monitor

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy bandit safety
        pip install -r requirements.txt

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports || true

    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Safety check for dependencies
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload quality reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          ap2-monitor/bandit-report.json
          ap2-monitor/safety-report.json
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    defaults:
      run:
        working-directory: ap2-monitor

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration workflow
      run: |
        # Test complete workflow with example data
        python monitor.py
        
        # Verify reports were generated
        test -f Results/report.json
        test -f Results/report.xlsx
        
        # Basic validation of JSON report structure
        python -c "
        import json
        with open('Results/report.json', 'r') as f:
            data = json.load(f)
        assert 'top_rated' in data
        assert isinstance(data['top_rated'], list)
        print('âœ… JSON report structure validation passed')
        "

    - name: Upload final reports
      uses: actions/upload-artifact@v4
      with:
        name: ap2-monitor-final-reports
        path: ap2-monitor/Results/
        retention-days: 90

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, code-quality, integration]
    if: always()

    steps:
    - name: Workflow Summary
      run: |
        echo "## ðŸŽ¯ AP2 Monitor Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- Test reports from multiple Python versions and OS combinations" >> $GITHUB_STEP_SUMMARY
        echo "- Code quality analysis reports" >> $GITHUB_STEP_SUMMARY
        echo "- Final JSON and Excel monitoring reports" >> $GITHUB_STEP_SUMMARY